diff --git a/org.eclipse.mylyn.hudson.core/.classpath b/org.eclipse.mylyn.hudson.core/.classpath
index 7e8449d..5d0495e 100644
--- a/org.eclipse.mylyn.hudson.core/.classpath
+++ b/org.eclipse.mylyn.hudson.core/.classpath
@@ -2,7 +2,7 @@
 <classpath>
 	<classpathentry kind="src" path="src"/>
 	<classpathentry kind="src" path="src-gen"/>
-	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/J2SE-1.5"/>
+	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.6"/>
 	<classpathentry kind="con" path="org.eclipse.pde.core.requiredPlugins"/>
 	<classpathentry kind="output" path="bin"/>
 </classpath>
diff --git a/org.eclipse.mylyn.hudson.core/.settings/org.eclipse.jdt.core.prefs b/org.eclipse.mylyn.hudson.core/.settings/org.eclipse.jdt.core.prefs
index bbaca6d..cab3af8 100644
--- a/org.eclipse.mylyn.hudson.core/.settings/org.eclipse.jdt.core.prefs
+++ b/org.eclipse.mylyn.hudson.core/.settings/org.eclipse.jdt.core.prefs
@@ -1,4 +1,4 @@
-#Wed Mar 02 16:00:06 PST 2011
+#Wed Apr 27 17:25:08 EDT 2011
 eclipse.preferences.version=1
 org.eclipse.jdt.core.codeComplete.argumentPrefixes=
 org.eclipse.jdt.core.codeComplete.argumentSuffixes=
@@ -9,9 +9,9 @@ org.eclipse.jdt.core.codeComplete.localSuffixes=
 org.eclipse.jdt.core.codeComplete.staticFieldPrefixes=
 org.eclipse.jdt.core.codeComplete.staticFieldSuffixes=
 org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
-org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.6
 org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
-org.eclipse.jdt.core.compiler.compliance=1.5
+org.eclipse.jdt.core.compiler.compliance=1.6
 org.eclipse.jdt.core.compiler.debug.lineNumber=generate
 org.eclipse.jdt.core.compiler.debug.localVariable=generate
 org.eclipse.jdt.core.compiler.debug.sourceFile=generate
@@ -75,7 +75,7 @@ org.eclipse.jdt.core.compiler.problem.unusedParameterWhenOverridingConcrete=disa
 org.eclipse.jdt.core.compiler.problem.unusedPrivateMember=warning
 org.eclipse.jdt.core.compiler.problem.unusedWarningToken=warning
 org.eclipse.jdt.core.compiler.problem.varargsArgumentNeedCast=warning
-org.eclipse.jdt.core.compiler.source=1.5
+org.eclipse.jdt.core.compiler.source=1.6
 org.eclipse.jdt.core.compiler.taskCaseSensitive=enabled
 org.eclipse.jdt.core.compiler.taskPriorities=NORMAL,HIGH,NORMAL
 org.eclipse.jdt.core.compiler.taskTags=TODO,FIXME,XXX
@@ -124,11 +124,9 @@ org.eclipse.jdt.core.formatter.brace_position_for_enum_declaration=end_of_line
 org.eclipse.jdt.core.formatter.brace_position_for_method_declaration=end_of_line
 org.eclipse.jdt.core.formatter.brace_position_for_switch=end_of_line
 org.eclipse.jdt.core.formatter.brace_position_for_type_declaration=end_of_line
-org.eclipse.jdt.core.formatter.comment.clear_blank_lines=false
 org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment=false
 org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment=true
 org.eclipse.jdt.core.formatter.comment.format_block_comments=false
-org.eclipse.jdt.core.formatter.comment.format_comments=true
 org.eclipse.jdt.core.formatter.comment.format_header=false
 org.eclipse.jdt.core.formatter.comment.format_html=true
 org.eclipse.jdt.core.formatter.comment.format_javadoc_comments=true
@@ -141,7 +139,6 @@ org.eclipse.jdt.core.formatter.comment.insert_new_line_for_parameter=insert
 org.eclipse.jdt.core.formatter.comment.line_length=120
 org.eclipse.jdt.core.formatter.comment.new_lines_at_block_boundaries=true
 org.eclipse.jdt.core.formatter.comment.new_lines_at_javadoc_boundaries=true
-org.eclipse.jdt.core.formatter.comment.preserve_white_space_between_code_and_line_comments=false
 org.eclipse.jdt.core.formatter.compact_else_if=true
 org.eclipse.jdt.core.formatter.continuation_indentation=2
 org.eclipse.jdt.core.formatter.continuation_indentation_for_array_initializer=2
@@ -160,14 +157,9 @@ org.eclipse.jdt.core.formatter.indent_statements_compare_to_body=true
 org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_cases=true
 org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch=false
 org.eclipse.jdt.core.formatter.indentation.size=4
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation=insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_field=insert
 org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_local_variable=insert
 org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_member=insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_method=insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_package=insert
 org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter=insert
-org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_type=insert
 org.eclipse.jdt.core.formatter.insert_new_line_after_label=do not insert
 org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer=do not insert
 org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing=do not insert
diff --git a/org.eclipse.mylyn.hudson.core/META-INF/MANIFEST.MF b/org.eclipse.mylyn.hudson.core/META-INF/MANIFEST.MF
index dcbab91..18a3b93 100644
--- a/org.eclipse.mylyn.hudson.core/META-INF/MANIFEST.MF
+++ b/org.eclipse.mylyn.hudson.core/META-INF/MANIFEST.MF
@@ -10,14 +10,13 @@ Require-Bundle: org.eclipse.core.runtime;bundle-version="3.5.0",
  org.eclipse.mylyn.commons.core;bundle-version="[3.4.0,4.0.0)",
  org.eclipse.mylyn.commons.net;bundle-version="[3.4.0,4.0.0)",
  org.eclipse.mylyn.commons.repositories,
- javax.xml.bind;bundle-version="2.2.0",
- com.sun.xml.bind;bundle-version="2.2.0"
+ javax.xml.bind
 Bundle-ActivationPolicy: lazy
-Bundle-RequiredExecutionEnvironment: J2SE-1.5
+Bundle-RequiredExecutionEnvironment: JavaSE-1.6
 Bundle-Localization: plugin
 Export-Package: org.eclipse.mylyn.internal.hudson.core;x-internal:=true,
  org.eclipse.mylyn.internal.hudson.core.client;x-internal:=true,
  org.eclipse.mylyn.internal.hudson.model;x-internal:=true
 Bundle-Activator: org.eclipse.mylyn.internal.hudson.core.HudsonCorePlugin
-Import-Package: javax.xml.stream;version="1.0.1",
+Import-Package: javax.xml.stream,
  org.json
diff --git a/org.eclipse.mylyn.hudson.core/src/org/eclipse/mylyn/internal/hudson/core/client/RestfulHudsonClient.java b/org.eclipse.mylyn.hudson.core/src/org/eclipse/mylyn/internal/hudson/core/client/RestfulHudsonClient.java
index 79bc4f4..bbcb894 100644
--- a/org.eclipse.mylyn.hudson.core/src/org/eclipse/mylyn/internal/hudson/core/client/RestfulHudsonClient.java
+++ b/org.eclipse.mylyn.hudson.core/src/org/eclipse/mylyn/internal/hudson/core/client/RestfulHudsonClient.java
@@ -65,8 +65,6 @@ import org.w3c.dom.Element;
 import org.w3c.dom.Node;
 import org.xml.sax.SAXException;
 
-import com.sun.xml.bind.v2.runtime.JAXBContextImpl.JAXBContextBuilder;
-
 /**
  * Represents the Hudson repository that is accessed through REST.
  * 
@@ -407,7 +405,8 @@ public class RestfulHudsonClient {
 	public static <T> T unmarshal(Node node, Class<T> clazz) throws JAXBException {
 		// fails on Java 5, see bug 325176
 		// JAXBContext ctx = JAXBContext.newInstance(clazz);
-		JAXBContext ctx = new JAXBContextBuilder().setClasses(new Class<?>[] { clazz }).build();
+		JAXBContext ctx = JAXBContext.newInstance(clazz);
+		//JAXBContext ctx = new JAXBContextBuilder().setClasses(new Class<?>[] { clazz }).build();
 		Unmarshaller unmarshaller = ctx.createUnmarshaller();
 
 		JAXBElement<T> hudsonElement = unmarshaller.unmarshal(node, clazz);
diff --git a/org.eclipse.mylyn.hudson.ui/META-INF/MANIFEST.MF b/org.eclipse.mylyn.hudson.ui/META-INF/MANIFEST.MF
index dbaa1f9..3f1b085 100644
--- a/org.eclipse.mylyn.hudson.ui/META-INF/MANIFEST.MF
+++ b/org.eclipse.mylyn.hudson.ui/META-INF/MANIFEST.MF
@@ -10,10 +10,6 @@ Require-Bundle: org.eclipse.core.runtime,
  org.eclipse.mylyn.builds.ui,
  org.eclipse.mylyn.commons.core;bundle-version="[3.4.0,4.0.0)",
  org.eclipse.mylyn.hudson.core,
- org.eclipse.ecf;bundle-version="3.0.0";resolution:=optional,
- org.eclipse.ecf.discovery;bundle-version="3.0.0";resolution:=optional,
- org.eclipse.ecf.provider.discovery;bundle-version="2.0.0";resolution:=optional,
- org.eclipse.ecf.provider.jmdns;bundle-version="3.0.0";resolution:=optional,
  org.eclipse.mylyn.commons.team;bundle-version="0.1.0",
  org.eclipse.mylyn.commons.notifications;bundle-version="0.1.0"
 Bundle-ActivationPolicy: lazy
diff --git a/org.eclipse.mylyn.hudson.ui/plugin.xml b/org.eclipse.mylyn.hudson.ui/plugin.xml
index 6612ca7..256fd08 100644
--- a/org.eclipse.mylyn.hudson.ui/plugin.xml
+++ b/org.eclipse.mylyn.hudson.ui/plugin.xml
@@ -34,11 +34,5 @@
          </description>
       </wizard>
    </extension>
-   <extension
-         point="org.eclipse.mylyn.builds.ui.startup">
-      <startup
-            class="org.eclipse.mylyn.internal.hudson.ui.HudsonDiscovery">
-      </startup>
-   </extension>
 
 </plugin>
diff --git a/org.eclipse.mylyn.hudson.ui/src/org/eclipse/mylyn/internal/hudson/ui/HudsonDiscovery.java b/org.eclipse.mylyn.hudson.ui/src/org/eclipse/mylyn/internal/hudson/ui/HudsonDiscovery.java
deleted file mode 100644
index 6bbe42e..0000000
--- a/org.eclipse.mylyn.hudson.ui/src/org/eclipse/mylyn/internal/hudson/ui/HudsonDiscovery.java
+++ /dev/null
@@ -1,130 +0,0 @@
-/*******************************************************************************
- * Copyright (c) 2010 Itema AS and others.
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *     Itema AS - initial API and implementation
- *******************************************************************************/
-
-package org.eclipse.mylyn.internal.hudson.ui;
-
-import java.net.MalformedURLException;
-import java.net.URI;
-import java.net.URISyntaxException;
-import java.util.List;
-import java.util.UUID;
-
-import org.eclipse.core.runtime.IStatus;
-import org.eclipse.core.runtime.Status;
-import org.eclipse.ecf.core.ContainerConnectException;
-import org.eclipse.ecf.core.ContainerCreateException;
-import org.eclipse.ecf.core.ContainerFactory;
-import org.eclipse.ecf.core.IContainer;
-import org.eclipse.ecf.discovery.IDiscoveryLocator;
-import org.eclipse.ecf.discovery.IServiceEvent;
-import org.eclipse.ecf.discovery.IServiceInfo;
-import org.eclipse.ecf.discovery.IServiceListener;
-import org.eclipse.ecf.discovery.IServiceProperties;
-import org.eclipse.ecf.discovery.identity.IServiceID;
-import org.eclipse.ecf.discovery.identity.IServiceTypeID;
-import org.eclipse.mylyn.builds.core.IBuildServer;
-import org.eclipse.mylyn.builds.ui.BuildsUi;
-import org.eclipse.mylyn.builds.ui.BuildsUiStartup;
-import org.eclipse.mylyn.commons.core.StatusHandler;
-import org.eclipse.osgi.util.NLS;
-
-/**
- * This class implements a mechanism for discovering Hudson servers through the use of Multicast DNS (MDNS).
- * 
- * @author Torkild U. Resheim
- * @since 3.5
- */
-public class HudsonDiscovery extends BuildsUiStartup {
-
-	private static final String ECF_DISCOVERY_JMDNS = "ecf.discovery.jmdns"; //$NON-NLS-1$
-
-	private static final String ECF_SINGLETON_DISCOVERY = "ecf.singleton.discovery"; //$NON-NLS-1$
-
-	private static final String HUDSON_MDNS_ID = "_hudson._tcp.local._iana"; //$NON-NLS-1$
-
-	private static final String HUDSON_URL_PROPERTY_ID = "url"; //$NON-NLS-1$
-
-	protected IContainer getContainer() throws ContainerCreateException {
-		return ContainerFactory.getDefault().createContainer(ECF_SINGLETON_DISCOVERY,
-				new Object[] { ECF_DISCOVERY_JMDNS });
-	}
-
-	private boolean isNew(URI uri) {
-		List<IBuildServer> servers = BuildsUi.getModel().getServers();
-		for (IBuildServer server : servers) {
-			try {
-				if (server.getUrl().equalsIgnoreCase(uri.toURL().toExternalForm())) {
-					return false;
-				}
-			} catch (MalformedURLException e) {
-				StatusHandler.log(new Status(IStatus.ERROR, HudsonConnectorUi.ID_PLUGIN,
-						Messages.HudsonDiscovery_CannotConvertURI, e));
-			}
-		}
-		return true;
-	}
-
-	@Override
-	public void lazyStartup() {
-		try {
-			final IContainer container = getContainer();
-			final IDiscoveryLocator adapter = (IDiscoveryLocator) getContainer().getAdapter(IDiscoveryLocator.class);
-			adapter.addServiceListener(new IServiceListener() {
-				public void serviceDiscovered(IServiceEvent anEvent) {
-					IServiceInfo serviceInfo = anEvent.getServiceInfo();
-					IServiceID serviceId = serviceInfo.getServiceID();
-					IServiceTypeID serviceTypeId = serviceId.getServiceTypeID();
-					if (serviceTypeId.getName().equals(HUDSON_MDNS_ID)) {
-						IServiceProperties properties = serviceInfo.getServiceProperties();
-						try {
-							if (properties.getProperty(HUDSON_URL_PROPERTY_ID) == null) {
-								notifyMessage(Messages.HudsonDiscovery_MessageTitle, NLS.bind(
-										Messages.HudsonDiscovery_MissingURL, new Object[] { serviceInfo.getLocation()
-												.getHost() }));
-
-							} else {
-								URI uri = new URI(properties.getProperty(HUDSON_URL_PROPERTY_ID).toString());
-								if (isNew(uri)) {
-									notifyMessage(
-											Messages.HudsonDiscovery_MessageTitle,
-											NLS.bind(Messages.HudsonDiscovery_MessageText, new Object[] { uri,
-													Messages.HudsonDiscovery_ServerName, uri.toString(),
-													UUID.randomUUID().toString() }));
-								}
-							}
-						} catch (URISyntaxException e) {
-							StatusHandler.log(new Status(IStatus.ERROR, HudsonConnectorUi.ID_PLUGIN, NLS.bind(
-									Messages.HudsonDiscovery_IncorrectURI,
-									new Object[] { properties.getProperty(HUDSON_URL_PROPERTY_ID).toString() }), e));
-						}
-					}
-				}
-
-				public void serviceUndiscovered(IServiceEvent anEvent) {
-					// Ignore this for now
-				}
-			});
-			container.connect(null, null);
-
-		} catch (ContainerCreateException e) {
-			StatusHandler.log(new Status(IStatus.WARNING, HudsonConnectorUi.ID_PLUGIN,
-					Messages.HudsonDiscovery_CouldNotStartService, e));
-		} catch (ContainerConnectException e) {
-			StatusHandler.log(new Status(IStatus.WARNING, HudsonConnectorUi.ID_PLUGIN,
-					Messages.HudsonDiscovery_CouldNotStartService, e));
-		}
-	}
-
-	private void notifyMessage(String title, String description) {
-		BuildsUi.serverDiscovered(title, description);
-	}
-
-}
